# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GfcBh6zMgrhkJIff2g4BgEo63YxhLtXR

# Import libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler

"""# Load the dataset







"""

data = pd.read_csv("/content/heart.csv")
data.head()
#print(data)  #To visualize data
# Display basic statistics & descride data whole
#print("\nDataset statistics:")
#print(data.describe())

"""CHECK NULL_VALUES"""

# Check for null values
print("Missing values per column:\n", data.isnull().sum())
print("\nNo missing values detected.")

"""# Split the dataset into features (X) and target (y)

MODEL START:
"""

# Features (all columns except the target)
X = data.drop("target", axis=1)   #axis = 1 represent the columns &&  axis = 0 represent rows
# Target variable
y = data["target"]

"""# Split the data into training and testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Initialize and train the logistic regression model

"""

model = LogisticRegression()
model.fit(X_train, y_train)

"""**VISUALIZE HOW DATA IS TRAIN AND TEST :**"""

X_train

y_train

X_test

y_test

"""# Make predictions"""

y_pred = model.predict(X_test)

"""# Evaluate the model"""

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

"""# Print evaluation metrics"""

print("Model Performance:")
print("Accuracy:", accuracy)

print("Confusion Matrix:\n", conf_matrix)

print("Classification Report:\n", class_report)

"""# Model train at above
# If we want to check by giving input

"""

scaler=StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

random_data_multiple = np.array([[63, 1, 3, 145, 233, 1, 0, 150, 0, 2.3, 0, 0, 1], #patient :1
                                 [41, 0, 1, 170, 204, 0, 1, 160, 0, 3.1, 2, 1, 3],
                                  [80, 0, 1, 170, 304, 0, 1, 260, 0, 0.1, 2, 1, 2],
                                  [41, 0, 1, 130, 278, 0, 1, 275, 0, 0.6, 2, 1, 3]    ])                                              #patient :2

random_data_multiple_scaled = scaler.transform(random_data_multiple)  #Scale data
predictions = model.predict(random_data_multiple_scaled)  #predict class
probability = model.predict_proba(random_data_multiple_scaled)  #Get probability

print("Predictions:", predictions)
print("Probabilities:", probability)